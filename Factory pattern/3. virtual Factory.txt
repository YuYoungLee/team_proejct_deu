//추상 클래스로 팩토리를 구현하는 방법
//여러 타입의 family 생성할때 사용되는 방식

struct HotDrink
{
	//순수 가상함수 형태 제정의 필요
	virtual void prepare(int volume) = 0;
};

struct Tea : HotDrink
{
	//상속받아 제정의 형태
	void prepare(int volume) override
	{
		cout << "Take tea bag, boil water, pour" << volume << "ml. add some lemon" << endl;
	}
};

struct Cofee : HotDrink
{
	void prepare(int volume) override
	{
		cout "Grind some beans, boil water, pour" << volume << "ml, add cream, enjoy!" << endl; 
	}
};

struct HotDrinkFactory
{
	virtual unique_ptr<HotDrink> make() const = 0;
};

struct CoffeFaCTORY : HotDrinkFactory
{
	unique_ptr<HotDrink> make() const override
	{
		return make_unique<Coffee>();
	}
};

//클래스 드링크 펙토리를 통한 스트럭트 접근
class DrinkFactory
{
	map<string, unique_ptr<HotDrinkFactory>> hot_factories;
public:
	DrinkFactory()
	{
	hot_factories["coffee"] = make_unique<CoffeeFactory>();
	hot_factories["tea"] = make_unique<TeaFactory>();
	}

	unique_ptr<HotDrink> make_drink(const string& name, int volume)
	{
		auto drink = hot_factories[name]-> make();
		drink->prepare(volume);
		return drink;
	}
};

int main(void)
{
	DrinkFactory df;
	df.make_drink("coffee", 200);

	return 0;
}
//팩토리 메서드 패턴
//상속으로 구현하여 어떠한 객체를 만들것인지는 유도 클래스의 메서드가 결정한다.

//케릭터 클래스
class Character
{
public:
	virtual void Attack()=0;
};

//유도 클래스 메서드 아쳐
class Archer : public Character
{
	void Attac() override
	{
		cout << "활을 쏘다." << endl;
	}
};

//유도 클래스 메서드 워리어
class Warrior : public Character
{
	void Attac() override
	{
		cout << "칼을 휘두른다." << endl;
	}
	virtual Character* FactoryMethod() =0;
};

class ArcherCreator : public CharacterCreator
{
	Character* FactoryMethod() override
	{
		return newArcher;
	}
}

class WarriorCreator : public CharacterCreator
{
	Charactor* FactoryMethod() override
	{
		return newWarrior;
	}
};

int main(void)
{
	//크리에이터 클래스를 통해 아쳐 케릭터를 생성한다.
	//유도클래스를 통해 생성하여 구체적인 정보들이 담긴다.
	ArcherCreator* archer = new ArcherCreator();
	Charactor* character = archer->Create();
	character-> Attac();

	return 0;
}
class DynamicSingleton
{
private:
	DynamicSingleton() { cout << "default" << endl; }
	DynamicSingleton(const DynamicSingleton& copy) { cout << "const copy" << endl; }
	~DynamicSingleton() { cout << "소멸" << endl; }
	static DynamicSingleton* instance;
public:
	static DynamicSingleton* Getinstance()
	{
		if (instance == NULL)
			instance = new DynamicSingleton();	//new를 통한 디폴트 생성자 호출
		return instance;
	}
};
DynamicSingleton* DynamicSingleton::instance = nullptr;

int main(void)
{
	DynamicSingleton::Getinstance();
	DynamicSingleton::Getinstance();			//instance == NULL이 동작하는지 확인을 위해 test
	return 0;
}


결과
default 문구가 나오며 객체 생성까지 완료
소멸자는 실행이 안됬다.

정리
인스턴트 == NULL을 통해 중복된 인스턴트 생성을 방지
생성된 인스턴트를 통해 반환되면 DynamicSingleton() { cout << "default" << endl; } 를 통해 생성

생성과 함깨 static 생성 > 객체생성 > 소멸자 > 종료와 함께 static 소멸
return instance를 통해 중복된 함수를 실행하더라도 이미 생성된 객체(instance)를 반환한다.

의문1.
new를 통해 동적할당을 하면 delete를 통한 메모리 해제는 언제 실행되야 하는가? 필요가 없는가?
1. static은 시작하자마자 메모리상에 올라가며 프로그램이 종료될때 해제된다.
2. 싱글톤 클래스의 경우네는 단 한번만 생성이 되기 때문에 다른 문제에 직면할 가능성이 낮다.
3. 도중에 메모리를 해제해야 하는경우 atexite 함수를 이용하여 해체 하거나 전역객체의 소멸자를 이용한다.
	static DynamicSingleton* Getinstance()
	{
		if (instance == NULL)
		{	
			instance = new DynamicSingleton();	//new를 통한 디폴트 생성자 호출
			atexit(Destroy);			//Destroy 콜백 사용방법 stdlib.h
		}
		return instance;
	}
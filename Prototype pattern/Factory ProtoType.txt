//프로토 타입 팩토리를 사용
//전역 변수로 선언하여 복사하는것보다 더 직관적인 형태

#include <iostream>
using namespace std;

struct EmployeeFactory
{
	static Contact main;
	static Contact aux;

//전역으로 선언하여 외부에서 해당함수로 접근
//리턴을 통해 private 함수로 접근
	static unique_ptr<Contact> NewMainOfficeEmployee(string name, int suite)
	{
		return NewEmployee(name, suite, aux);
	}

	static unique_ptr<Contact> NewAuxOfficeEmployee(string name, int suite)
	{
		return NewEmployee(name, suite, aux);
	}
	
private:
//리턴을 통해 접근한 함수를 통해 값을 변경
	static unique_ptr<Contact> NewAuxOfficeEmployee(string name, int suite, Contact& proto)
	{
		auto result = make_unique<Contact>(proto);
		result->name = name;
		result->address->suite = suite;
		return result;
	}
};
Contact EmployeeFactory::main{ "",new Address{"123 East Dr", "London", 0} };
Contact EmployeeFactory::aux{ "",new Address{"123 East Dr", "London", 0} };

int main()
{
	auto john = EmployeeFactory::NewAuxOfficeEmployee("John Doe", 123);
	auto jane = EmployeeFactory::NewMainOfficeEmployee("Jane Doe", 125);
}

//전역 함수를 통해 private 로 선언된 함수로의 접근
//private 함수를 통해 값을 변경하고 있다.
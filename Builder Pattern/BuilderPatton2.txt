#include <iostream>
using namespace std;

struct Weapon
{
	int mPower;
};

struct Armor
{
	int mArmor;
};
//케릭터는 struct들의 요소를 가짐
class Character
{
public:
	Weapon* sPower;
	Armor* sArmor;

	void showstat()
	{
		cout << "공격력: " << sPower->mPower << endl;
		cout << "방어력: " << sArmor->mArmor << endl;
	}
};
//케릭터 빌더는 케릭터 클래스의 요소를 가짐
class CharacterBuilder
{
public:
	virtual Weapon* CreateWeapon() = 0;
	virtual Armor* CreateArmor() = 0;
};
//케릭터 감독자는 케릭터 클래스의 요소들을 가지며 객체를 생성
//has -a
class CharacterDirector
{
	CharacterBuilder* cBuilder;
public:
	void SetBuilder(CharacterBuilder* mBuilder)
	{
		cBuilder = mBuilder;
	}

	Character* CreateCharacter()
	{
		Character* character = new Character();

		character->sPower = cBuilder->CreateWeapon();
		character->sArmor = cBuilder->CreateArmor();

		return character;
	}
};

//마린은 케릭터 빌더를 상속받는다.
//is -a
class Marine : public CharacterBuilder
{
public:
	Weapon* CreateWeapon()
	{
		Weapon* weapon = new Weapon();
		weapon->mPower = 3;
		return weapon;
	}
	Armor* CreateArmor()
	{
		Armor* armor = new Armor();
		armor->mArmor = 1;
		return armor;
	}
};

class Tank : public CharacterBuilder
{
public:
	Weapon* CreateWeapon()
	{
		Weapon* weapon = new Weapon();
		weapon->mPower = 10;
		return weapon;
	}
	Armor* CreateArmor()
	{
		Armor* armor = new Armor();
		armor->mArmor = 3;
		return armor;
	}
};

int main(void)
{
	//케릭터 클래스 포인터
	Character* character;
	//감독자 객체
	CharacterDirector director;

	Marine m1;
	director.SetBuilder(&m1);
	character = director.CreateCharacter();
	character->showstat();

	Tank t1;
	director.SetBuilder(&t1);
	character = director.CreateCharacter();
	character->showstat();

	return 0;
}


복잡한 객체를 생성하는 방법 - 클래스 별로 분리
이후 감독자 객체를 통해 다른 객체의 정보들을 담아 이를 케릭터 객체에 저장
이후 케릭터 객체를 통해 이를 출력한다.

케릭터 클래스 - 공격력과 방어력의 정보를 출력
케릭터 빌더 클래스 - 순수가상함수를 통한 자식클레스 에서 재정의
감독자 클래스 - 마린, 탱크의 클래스 객체의 생성을 관리
마린, 탱크 클래스 - 클래스 별로 분리
//빌더 패턴. 여러 복잡한 요소들의 조합이 필요한 객체를 생성해야 하거나
//여러개의 다양한 객체 집합을 생성해야 할 때 개개체 생성만을 전담하는 컴포넌트를 정의
//객체 생성을 간편하게 하는 것

#include <iostream>
using namespace std;


//struct를 사용 public 형태
struct Weapon
{
	int mPower;
};

struct Armor
{
	int mDefence;
};

//케릭터 클래스를 통해 정보를 출력
class Character
{
public:
	Weapon* mWeapon;
	Armor* mArmor;

	//해당 캐릭터의(객체) 주소를 통해 정보출력
	void DisplayParts()
	{
		cout << "Weapon power" << mWeapon->mPower << endl;
		cout << "Armor defence" << mWeapon->mDefence << endl;
	}
};
//케릭터 빌더
//Struct의 주소를 통해 힘과 방어력 정보를 출력
class CharacterBuilder
{
public:
//virtual 순수 가상함수, 자식 클래스에서 재정의 가능형태
//virtual 을 사용하는 이유 - 자식 클래스를 통해 재 정의 가 필요하기 때문
//만약 오버라이딩 까지 사용할 경우 마지막으로 오버라이딩된 함수 출력도 가능하다.
	virtual Weapon* CreateWeapon() = 0;
	virtual Armor * CreateArmor() = 0;
};
//케릭터 감독자 has-a(소유의)관계
//케릭터클래스 포인터를 사용
//캐릭터 감독자는 캐릭터 빌더의 정보를 가진다. 
//케릭터 빌더의 객체를 이곳에서 만들며 저장
//has-a 관계
//상속하는 것이아닌 객체를 멤버 함수에서 생성하여 이를 참조하는 방식
class CharacterDirector
{
	CharacterBuilder* mBuilder;
public:
//케릭터
	void SetBuilder(CharacterBuilder* newBuilder)
	{
		mBuilder = newBuilder;
	}

//반환형이 클래스
	Character* CreateCharacter()
	{
		Character* character = new Character();
		character->mWeapon = mBuilder->CreateWeapon();
		character->mArmor = mBuilder->CreateArmor();

		return character;
	}
};

//아쳐 워리어 클래스 is - a관계
//struct포인터 함수
//struct의 객체를 만들어 정보들을 저장 해당객체를 반환
class ArcherBuilder : public CharacterBuilder
{
public:
	Weapon* CreateWeapon()
	{
		Weapon* weapon = new Weapon();
		weapon->mPower = 200;		
		return weapon;
	}

	Armor* CreateArmor()
	{
		Armor* armor = new Armor();
		armor->mDefence = 200;
		return armor;
	}
};

class WarriorBuilder : public CharacterBuilder
{
public:
	Weapon* CreateWeapon()
	{
		Weapon* weapon = new Weapon();
		weapon->mPower = 200;
		return weapon;
	}

	Armor* CreateArmor()
	{
		Armor* armor = new Armor();
		armor->mDefence = 200;
		return armor;
	}
};

int main()
{
	Character* character; 		//클래스 포인터를 통해 객체(케릭터)의 주소참조

	CharacterDirector director;	//감독자의 객체
	//클래스 케릭터의 객체를 만들기
	//케릭터의 객체의 주소를 가지고, 아처, 워리어의 정보, 방어력 공격력의 정보를 가진다.
	//아쳐, 워리어 객체(자식 is-a) > 감독자의 객체(부모 is-a)
	//아처, 워리어 객체 - > 무기의 정보들을 가르킴 struct
	//감독자의 객체 -> 캐릭터 객체를 만들며 struct의 정보들을 가져옴


	ArcherBuilder archer;
	director.SetBuilder(&archer);
	character = director.CreateCharacter();
	character->DisplayParts();

	WarriorBuilder warrior;
	director.SetBuilder(&warrior);
	character = director.CreateCharacter();
	character->DisplayParts();

	return 0;
}


struct를 이용하여 공격력, 방어력 정보를 담을 수있으며
클래스 케릭터를 통해 sturct 객체의 정보를 출력이 가능하다.

클래스 빌더 
를 통해 공격력과 방어력을 순수 가상함수 형태로 선언, 
자식클래스에서 재정의 하게 만들고 있다.

클래스 케릭터 감독자
has-a 관계로 기초 클래스(클래스 빌더)가 지니고 있는 모든것을 소유.
순수 가상함수 구조체 포인터를 